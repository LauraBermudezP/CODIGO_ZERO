package org.example;

import org.example.dao.ArticuloDAO;
import org.example.dao.CategoriaDAO;
import org.example.dao.ReporteDAO;
import org.example.dao.UsuarioDAO;
import org.example.database.DBconnection;
import org.example.model.*;

import java.sql.Connection;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Scanner;

public class Main {
    // metodo para validar que las input (IDs) sean del tipo de dato esperado
    public static int obtenerNumeroValido(Scanner sc, String mensaje) {
        int numero;
        do {
            System.out.print(mensaje);
            while (!sc.hasNextInt()) {
                System.out.println("üü• Debes ingresar un n√∫mero v√°lido que corresponda a un ID.");
                sc.next();
            }
            numero = sc.nextInt();
            sc.nextLine();

            if (numero <= 0) {
                System.out.println("üü• El ID debe ser mayor que 0.");
            }
        } while (numero <= 0);

        return numero;
    }

    public static void main(String[] args) {
        // objetos o instancias DAO
        UsuarioDAO usuarioDAO = new UsuarioDAO();
        ArticuloDAO articuloDAO = new ArticuloDAO();
        CategoriaDAO categoriaDAO = new CategoriaDAO();
        ReporteDAO reporteDAO = new ReporteDAO();
        // variables globales & scanner
        Integer opcion1, opcionUsuario, opcionAdministrador;
        Boolean menu1 = true, menuUsuario = true, menuAdministrador = true;
        Integer validacionLogin = 1;
        Scanner sc = new Scanner(System.in);
        // conexi√≥n & prueba de conexi√≥n para la BD
        Connection conexion = DBconnection.connect();
        /* if (conexion != null) {
            System.out.println("‚úÖ Conexi√≥n exitosa a la base de datos.");
        } else {
            System.out.println("üü• No se pudo establecer la conexi√≥n.");
        } */

        System.out.println("\n***** üëæ BIENVENIDO A C√ìDIGO ZERO üëæ *****\n");
        while (menu1) {
            System.out.println("* 1) Iniciar sesi√≥n ");
            System.out.println("* 2) Registrarse ");
            System.out.println("* 0) Cerrar ");
            System.out.print("Por favor, selecciona una opci√≥n: \n");
            opcion1 = sc.nextInt();
            sc.nextLine();

            switch (opcion1) {
                case 1:
                    String usernameLogin, contrasenaLogin;
                    System.out.println("üëæ INICIAR SESI√ìN üëæ");
                    System.out.print("* Ingrese su nombre de usuario: ");
                    usernameLogin = sc.nextLine();
                    System.out.print("* Ingrese su contrase√±a: ");
                    contrasenaLogin = sc.nextLine();

                    Usuario usuario = usuarioDAO.autenticarUsuario(usernameLogin, contrasenaLogin);

                    if (usuario != null) {
                        if (usuario.getRolUsuario().equalsIgnoreCase("administrador")) {
                            System.out.println("\n‚úÖüëæ Bienvenid@ a C√≥digo Zero, ADMIN @" + usuario.getUsername());
                            do {
                                System.out.println("=====================================");
                                System.out.println(" MEN√ö DE ADMINISTRADOR ");
                                System.out.println("=====================================");
                                System.out.println("üîπ ART√çCULOS:");
                                System.out.println("  1) Buscar un art√≠culo en espec√≠fico");
                                System.out.println("  2) Ver todos los art√≠culos");
                                System.out.println("  3) Eliminar un art√≠culo");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ REPORTES:");
                                System.out.println("  4) Ver un reporte en espec√≠fico");
                                System.out.println("  5) Ver todos los reportes del blog");
                                System.out.println("  6) Actualizar un reporte");
                                System.out.println("  7) Eliminar un reporte");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ USUARIOS:");
                                System.out.println("  8) Ver los usuarios registrados");
                                System.out.println("  9) Buscar un usuario en espec√≠fico");
                                System.out.println(" 10) Actualizar un usuario");
                                System.out.println(" 11) Eliminar un usuario");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ CATEGOR√çAS:");
                                System.out.println(" 12) Crear categor√≠a de contenido");
                                System.out.println(" 13) Ver las categor√≠as de contenido");
                                System.out.println(" 14) Actualizar una categor√≠a");
                                System.out.println(" 15) Eliminar una categor√≠a");
                                System.out.println("-------------------------------------");
                                System.out.println("  0) Cerrar men√∫");
                                System.out.println("=====================================");
                                System.out.print("Por favor, selecciona una opci√≥n: ");
                                opcionAdministrador = sc.nextInt();
                                sc.nextLine();

                                switch (opcionAdministrador) {
                                    case 1:
                                        System.out.println("\nüìÑ BUSCAR ART√çCULO üìÑ");

                                        int idArticulo = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo que desea ver: ");

                                        Articulo articuloEncontrado = articuloDAO.obtenerArticuloPorId(idArticulo);

                                        if (articuloEncontrado != null) {
                                            System.out.println("\nüìå Art√≠culo encontrado:");
                                            System.out.println("üÜî ID: " + articuloEncontrado.getIdArticulo());
                                            System.out.println("üìÑ T√≠tulo: " + articuloEncontrado.getTitulo());
                                            System.out.println("‚úç Contenido: " + articuloEncontrado.getContenidoArticulo());
                                            System.out.println("üìÇ Categor√≠a: " + articuloEncontrado.getIdCategoria());
                                            System.out.println("üìÜ Fecha de creaci√≥n: " + articuloEncontrado.getFechaCreacionArticulo());
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n art√≠culo con el ID proporcionado.");
                                        }
                                        break;
                                    case 2:
                                        System.out.println("\nüìÇ LISTA DE TODOS LOS ART√çCULOS üìÇ");

                                        List<Articulo> listaArticulos = articuloDAO.obtenerTodosLosArticulos();

                                        if (listaArticulos.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay art√≠culos registrados en la base de datos.");
                                        } else {
                                            for (Articulo articulo : listaArticulos) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID: " + articulo.getIdArticulo());
                                                System.out.println("üìÑ T√≠tulo: " + articulo.getTitulo());
                                                System.out.println("‚úç Contenido: " + articulo.getContenidoArticulo());
                                                System.out.println("üìÇ Tipo: " + articulo.getTipoArticulo());
                                                System.out.println("üë§ Autor ID: " + articulo.getIdAutor());
                                                System.out.println("üìÜ Fecha de creaci√≥n: " + articulo.getFechaCreacionArticulo());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 3:
                                        System.out.println("\nüóëÔ∏è ELIMINAR ART√çCULO üóëÔ∏è");
                                        int idEliminar = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo a eliminar: ");

                                        Articulo articuloAEliminar = articuloDAO.obtenerArticuloPorId(idEliminar);

                                        if (articuloAEliminar != null) {
                                            System.out.println("‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar este art√≠culo? (si/no)");
                                            System.out.println("üìÑ T√≠tulo: " + articuloAEliminar.getTitulo());

                                            String confirmacion = sc.nextLine();
                                            if (confirmacion.equalsIgnoreCase("si")) {
                                                articuloDAO.eliminarArticulo(idEliminar);
                                            } else {
                                                System.out.println("üü° Eliminaci√≥n de art√≠culo cancelada.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n art√≠culo con el ID proporcionado.");
                                        }
                                        break;
                                    case 4:
                                        System.out.println("\nüìÑ VER REPORTE üìÑ");

                                        int idReporte = obtenerNumeroValido(sc, "* Ingrese el ID del reporte que desea ver: ");

                                        Reporte reporteEncontrado = reporteDAO.obtenerReportePorId(idReporte);

                                        if (reporteEncontrado != null) {
                                            System.out.println("\nüìå Reporte encontrado:");
                                            System.out.println("üÜî ID: " + reporteEncontrado.getIdReporte());
                                            System.out.println("üìÑ Motivo: " + reporteEncontrado.getMotivoReporte());
                                            System.out.println("üìÜ Fecha: " + reporteEncontrado.getFechaReporte());
                                            System.out.println("üìÇ Estado: " + reporteEncontrado.getEstadoReporte());
                                            System.out.println("üë§ ID Usuario: " + reporteEncontrado.getIdUsuario());
                                            System.out.println("üìÑ ID Art√≠culo asociado: " + reporteEncontrado.getIdArticulo());
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n reporte con el ID proporcionado.");
                                        }
                                        break;
                                    case 5:
                                        System.out.println("\nüìë LISTA DE TODOS LOS REPORTES üìë");

                                        List<Reporte> listaReportes = reporteDAO.obtenerTodosLosReportes();

                                        if (listaReportes.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay reportes registrados en la base de datos.");
                                        } else {
                                            for (Reporte reporte : listaReportes) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID: " + reporte.getIdReporte());
                                                System.out.println("üìÑ Motivo: " + reporte.getMotivoReporte());
                                                System.out.println("üìÜ Fecha de reporte: " + reporte.getFechaReporte());
                                                System.out.println("üìÇ Estado: " + reporte.getEstadoReporte());
                                                System.out.println("üë§ ID Usuario: " + reporte.getIdUsuario());
                                                System.out.println("üìÑ ID Art√≠culo reportado: " + reporte.getIdArticulo());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 6:
                                        System.out.println("\n‚úèÔ∏è ACTUALIZAR REPORTE ‚úèÔ∏è");

                                        int idReporteActualizar = obtenerNumeroValido(sc, "* Ingrese el ID del reporte que desea actualizar: ");

                                        Reporte reporteExistente = reporteDAO.obtenerReportePorId(idReporteActualizar);

                                        if (reporteExistente != null) {
                                            System.out.println("\nüìå Reporte encontrado:");
                                            System.out.println("üìÑ Motivo actual: " + reporteExistente.getMotivoReporte());
                                            System.out.println("üìÜ Fecha: " + reporteExistente.getFechaReporte());
                                            System.out.println("üìÇ Estado actual: " + reporteExistente.getEstadoReporte());

                                            System.out.print("* Ingrese el nuevo motivo del reporte: ");
                                            String nuevoMotivo = sc.nextLine();

                                            String nuevoEstado;
                                            do {
                                                System.out.print("* Estado del reporte (Pendiente / Revisado / Cerrado): ");
                                                nuevoEstado = sc.nextLine();

                                                if (!nuevoEstado.equalsIgnoreCase("Pendiente") &&
                                                        !nuevoEstado.equalsIgnoreCase("Revisado") &&
                                                        !nuevoEstado.equalsIgnoreCase("Cerrado")) {
                                                    System.out.println("üü• Estado inv√°lido. Debe ser 'Pendiente', 'Revisado' o 'Cerrado'.");
                                                }
                                            } while (!nuevoEstado.equalsIgnoreCase("Pendiente") &&
                                                    !nuevoEstado.equalsIgnoreCase("Revisado") &&
                                                    !nuevoEstado.equalsIgnoreCase("Cerrado"));

                                            System.out.print("* Ingrese el ID del usuario que registr√≥ el reporte: ");
                                            int idUsuario = sc.nextInt();
                                            sc.nextLine();

                                            System.out.print("* Ingrese el ID del art√≠culo asociado al reporte: ");
                                            int idArticuloAsociado = sc.nextInt();
                                            sc.nextLine();

                                            Reporte reporteActualizado = new Reporte(
                                                    idReporteActualizar, nuevoMotivo, reporteExistente.getFechaReporte(), nuevoEstado, idUsuario, idArticuloAsociado
                                            );

                                            reporteDAO.actualizarReporte(reporteActualizado);
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n reporte con el ID proporcionado.");
                                        }
                                        break;
                                    case 7:
                                        System.out.println("\nüóëÔ∏è ELIMINAR REPORTE üóëÔ∏è");

                                        int idReporteEliminar = obtenerNumeroValido(sc, "* Ingrese el ID del reporte a eliminar: ");

                                        Reporte reporteAEliminar = reporteDAO.obtenerReportePorId(idReporteEliminar);

                                        if (reporteAEliminar != null) {
                                            System.out.println("\n‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar este reporte? (si/no)");
                                            System.out.println("üìÑ Motivo: " + reporteAEliminar.getMotivoReporte());
                                            System.out.println("üìÜ Fecha de reporte: " + reporteAEliminar.getFechaReporte());
                                            System.out.println("üìÇ Estado: " + reporteAEliminar.getEstadoReporte());

                                            String confirmacion = sc.nextLine();
                                            if (confirmacion.equalsIgnoreCase("si")) {
                                                reporteDAO.eliminarReporte(idReporteEliminar);
                                            } else {
                                                System.out.println("üü° Eliminaci√≥n cancelada.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n reporte con el ID proporcionado.");
                                        }
                                        break;
                                    case 8:
                                        System.out.println("\nüë• LISTA DE TODOS LOS USUARIOS üë•");

                                        List<Usuario> listaUsuarios = usuarioDAO.obtenerTodosLosUsuarios();

                                        if (listaUsuarios.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay usuarios registrados en la base de datos.");
                                        } else {
                                            for (Usuario u : listaUsuarios) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID Usuario: " + u.getIdUsuario());
                                                System.out.println("üë§ Username: " + u.getUsername());
                                                System.out.println("üìß Correo: " + u.getCorreoUsuario());
                                                System.out.println("üìù Biograf√≠a: " + u.getBiografiaUsuario());
                                                System.out.println("üìÇ Rol: " + u.getRolUsuario());
                                                System.out.println("üìÜ Fecha de registro: " + u.getFechaRegistro());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 9:
                                        System.out.println("\nüîç BUSCAR USUARIO üîç");

                                        int idUsuarioBuscar = obtenerNumeroValido(sc, "* Ingrese el ID del usuario que desea buscar: ");

                                        Usuario usuarioEncontrado = usuarioDAO.obtenerUsuarioPorId(idUsuarioBuscar);

                                        if (usuarioEncontrado != null) {
                                            System.out.println("\nüìå Usuario encontrado:");
                                            System.out.println("üÜî ID Usuario: " + usuarioEncontrado.getIdUsuario());
                                            System.out.println("üë§ Username: " + usuarioEncontrado.getUsername());
                                            System.out.println("üìß Correo: " + usuarioEncontrado.getCorreoUsuario());
                                            System.out.println("üìù Biograf√≠a: " + usuarioEncontrado.getBiografiaUsuario());
                                            System.out.println("üìÇ Rol: " + usuarioEncontrado.getRolUsuario());
                                            System.out.println("üìÜ Fecha de registro: " + usuarioEncontrado.getFechaRegistro());
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n usuario con el ID proporcionado.");
                                        }
                                        break;
                                    case 11:
                                        System.out.println("\nüóëÔ∏è ELIMINAR USUARIO üóëÔ∏è");

                                        int idUsuarioEliminar = obtenerNumeroValido(sc, "* Ingrese el ID del usuario que desea eliminar: ");

                                        Usuario usuarioAEliminar = usuarioDAO.obtenerUsuarioPorId(idUsuarioEliminar);

                                        if (usuarioAEliminar != null) {
                                            System.out.println("\n‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar este usuario del blog? (si/no)");
                                            System.out.println("üë§ Username: " + usuarioAEliminar.getUsername());
                                            System.out.println("üìß Correo: " + usuarioAEliminar.getCorreoUsuario());
                                            System.out.println("üìÇ Rol: " + usuarioAEliminar.getRolUsuario());

                                            String confirmacion = sc.nextLine();
                                            if (confirmacion.equalsIgnoreCase("si")) {
                                                usuarioDAO.eliminarUsuario(idUsuarioEliminar);
                                            } else {
                                                System.out.println("üü° Eliminaci√≥n cancelada.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n usuario con el ID proporcionado.");
                                        }
                                        break;
                                    case 12:
                                        System.out.println("\nüìù CREAR CATEGOR√çA üìù");
                                        System.out.print("* Nombre de la categor√≠a: ");
                                        String nombreCategoria = sc.nextLine();

                                        System.out.print("* Descripci√≥n corta de la categor√≠a: ");
                                        String descripcion = sc.nextLine();

                                        Categoria nuevaCategoria = new Categoria(0, nombreCategoria, descripcion);
                                        categoriaDAO.crearCategoria(nuevaCategoria);
                                        break;
                                    case 13:
                                        System.out.println("\nüìÇ LISTA DE TODAS LAS CATEGOR√çAS üìÇ");

                                        List<Categoria> listaCategorias = categoriaDAO.obtenerTodasLasCategorias();

                                        if (listaCategorias.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay categor√≠as registradas en la base de datos.");
                                        } else {
                                            for (Categoria categoria : listaCategorias) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID Categor√≠a: " + categoria.getIdCategoria());
                                                System.out.println("üìå Nombre: " + categoria.getNombreCategoria());
                                                System.out.println("üìù Descripci√≥n: " + categoria.getDescripcion());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 14:
                                        System.out.println("\n‚úèÔ∏è ACTUALIZAR CATEGOR√çA ‚úèÔ∏è");

                                        int idCategoriaActualizar = obtenerNumeroValido(sc, "* Ingrese el ID de la categor√≠a a actualizar: ");

                                        Categoria categoriaExistente = categoriaDAO.obtenerCategoriaPorId(idCategoriaActualizar);

                                        if (categoriaExistente != null) {
                                            System.out.println("\nüìå Categor√≠a encontrada:");
                                            System.out.println("üìå Nombre actual: " + categoriaExistente.getNombreCategoria());
                                            System.out.println("üìù Descripci√≥n actual: " + categoriaExistente.getDescripcion());

                                            System.out.print("* Ingrese el nuevo nombre de la categor√≠a: ");
                                            String nuevoNombre = sc.nextLine();

                                            System.out.print("* Ingrese la nueva descripci√≥n de la categor√≠a: ");
                                            String nuevaDescripcion = sc.nextLine();

                                            Categoria categoriaActualizada = new Categoria(idCategoriaActualizar, nuevoNombre, nuevaDescripcion);
                                            categoriaDAO.actualizarCategoria(categoriaActualizada);
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ninguna categor√≠a con el ID proporcionado.");
                                        }
                                        break;
                                    case 15:
                                        System.out.println("\nüóëÔ∏è ELIMINAR CATEGOR√çA üóëÔ∏è");

                                        int idCategoriaEliminar = obtenerNumeroValido(sc, "* Ingrese el ID de la categor√≠a que desea eliminar: ");

                                        Categoria categoriaAEliminar = categoriaDAO.obtenerCategoriaPorId(idCategoriaEliminar);

                                        if (categoriaAEliminar != null) {
                                            System.out.println("\n‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar esta categor√≠a? (si/no)");
                                            System.out.println("üìå Nombre: " + categoriaAEliminar.getNombreCategoria());
                                            System.out.println("üìù Descripci√≥n: " + categoriaAEliminar.getDescripcion());

                                            String confirmacion = sc.nextLine();
                                            if (confirmacion.equalsIgnoreCase("si")) {
                                                categoriaDAO.eliminarCategoria(idCategoriaEliminar);
                                            } else {
                                                System.out.println("üü° Eliminaci√≥n cancelada.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ninguna categor√≠a con el ID proporcionado.");
                                        }
                                        break;
                                    case 0:
                                        System.out.println("\nüë§ Cerrando men√∫ de administrador...");
                                        menuAdministrador = false;
                                        break;
                                    default:
                                        System.out.println("\nüî¥ Opci√≥n inv√°lida. Intenta nuevamente...");
                                        break;
                                }
                            } while (menuAdministrador && opcionAdministrador != 0);
                        } else {
                            System.out.println("\n‚úÖüëæ Bienvenid@ a C√≥digo Zero, @" + usuario.getUsername());
                            do {
                                System.out.println("=====================================");
                                System.out.println(" MEN√ö DE USUARIO");
                                System.out.println("=====================================");
                                System.out.println("üîπ ART√çCULOS:");
                                System.out.println("  1) Crear art√≠culo");
                                System.out.println("  2) Actualizar un art√≠culo propio");
                                System.out.println("  3) Buscar un art√≠culo en espec√≠fico");
                                System.out.println("  4) Eliminar un art√≠culo propio");
                                System.out.println("  5) Ver todos los art√≠culos");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ TU CUENTA:");
                                System.out.println("  6) Actualizar perfil");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ REPORTES:");
                                System.out.println("  7) Generar un reporte");
                                System.out.println("-------------------------------------");
                                System.out.println("üîπ CATEGOR√çAS:");
                                System.out.println("  8) Ver una categor√≠a de contenido");
                                System.out.println("  9) Listar todas las categor√≠as del blog");
                                System.out.println("-------------------------------------");
                                System.out.println("  0) Cerrar men√∫");
                                System.out.println("=====================================");
                                System.out.print("Por favor, selecciona una opci√≥n: ");
                                opcionUsuario = sc.nextInt();
                                sc.nextLine();

                                switch (opcionUsuario) {
                                    case 1:
                                        System.out.println("\nüìù CREAR ART√çCULO üìù");
                                        System.out.print("* Ingresa el t√≠tulo: ");
                                        String titulo = sc.nextLine();

                                        System.out.print("* Escribe el contenido del art√≠culo: ");
                                        String contenido = sc.nextLine();

                                        String tipo;
                                        do {
                                            System.out.print("* Tipo de publicaci√≥n (Art√≠culo / Evento / Recurso / Oferta laboral): ");
                                            tipo = sc.nextLine();

                                            if (!tipo.equals("Art√≠culo") && !tipo.equals("Evento") && !tipo.equals("Recurso") && !tipo.equals("Oferta laboral")) {
                                                System.out.println("üü• Tipo de art√≠culo inv√°lido. Debe ser 'Art√≠culo', 'Evento', 'Recurso' o 'Oferta laboral'.");
                                            }
                                        } while (!tipo.equals("Art√≠culo") && !tipo.equals("Evento") && !tipo.equals("Recurso") && !tipo.equals("Oferta laboral"));

                                        System.out.print("* ID de la categor√≠a: ");
                                        int idCategoria = sc.nextInt();
                                        sc.nextLine();

                                        Articulo nuevoArticulo = new Articulo(0, titulo, contenido, tipo, usuario.getIdUsuario(), idCategoria, LocalDateTime.now());
                                        articuloDAO.crearArticulo(nuevoArticulo);
                                        break;
                                    case 2:
                                        System.out.println("\n‚úèÔ∏è ACTUALIZAR ART√çCULO ‚úèÔ∏è");

                                        int idArticuloActualizar = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo que desea actualizar: ");

                                        Articulo articuloExistente = articuloDAO.obtenerArticuloPorId(idArticuloActualizar);

                                        if (articuloExistente != null) {
                                            if (articuloExistente.getIdAutor() == usuario.getIdUsuario()) {
                                                System.out.println("\nüìå Art√≠culo encontrado:");
                                                System.out.println("üìÑ T√≠tulo actual: " + articuloExistente.getTitulo());
                                                System.out.println("‚úç Contenido actual: " + articuloExistente.getContenidoArticulo());
                                                System.out.println("üìÇ Tipo actual: " + articuloExistente.getTipoArticulo());

                                                System.out.print("* Ingrese el nuevo t√≠tulo del art√≠culo: ");
                                                String nuevoTitulo = sc.nextLine();

                                                System.out.print("* Escriba el nuevo contenido del art√≠culo: ");
                                                String nuevoContenido = sc.nextLine();

                                                System.out.print("* Tipo de art√≠culo (Art√≠culo / Evento / Recurso / Oferta laboral): ");
                                                String nuevoTipo = sc.nextLine();

                                                Articulo articuloActualizado = new Articulo(
                                                        idArticuloActualizar, nuevoTitulo, nuevoContenido, nuevoTipo, usuario.getIdUsuario(),
                                                        articuloExistente.getIdCategoria(), articuloExistente.getFechaCreacionArticulo()
                                                );
                                                articuloDAO.actualizarArticulo(articuloActualizado);
                                            } else {
                                                System.out.println("üü• No puedes actualizar un art√≠culo que no es tuyo.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n art√≠culo con el ID proporcionado.");
                                        }
                                        break;
                                    case 3:
                                        System.out.println("\nüîç BUSCAR ART√çCULO üîç");

                                        int idArticuloBuscar = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo que desea buscar: ");

                                        Articulo articuloEncontrado = articuloDAO.obtenerArticuloPorId(idArticuloBuscar);

                                        if (articuloEncontrado != null) {
                                            System.out.println("\nüìå Art√≠culo encontrado:");
                                            System.out.println("üÜî ID: " + articuloEncontrado.getIdArticulo());
                                            System.out.println("üìÑ T√≠tulo: " + articuloEncontrado.getTitulo());
                                            System.out.println("‚úç Contenido: " + articuloEncontrado.getContenidoArticulo());
                                            System.out.println("üìÇ Tipo: " + articuloEncontrado.getTipoArticulo());
                                            System.out.println("üë§ Autor ID: " + articuloEncontrado.getIdAutor());
                                            System.out.println("üìÜ Fecha de creaci√≥n: " + articuloEncontrado.getFechaCreacionArticulo());
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n art√≠culo con el ID proporcionado.");
                                        }
                                        break;
                                    case 4:
                                        System.out.println("\nüóëÔ∏è ELIMINAR ART√çCULO üóëÔ∏è");

                                        int idArticuloEliminar = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo que desea eliminar: ");

                                        Articulo articuloAEliminar = articuloDAO.obtenerArticuloPorId(idArticuloEliminar);

                                        if (articuloAEliminar != null) {
                                            if (articuloAEliminar.getIdAutor() == usuario.getIdUsuario()) {
                                                System.out.println("\n‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar este art√≠culo? (si/no)");
                                                System.out.println("üìÑ T√≠tulo: " + articuloAEliminar.getTitulo());
                                                System.out.println("‚úç Contenido: " + articuloAEliminar.getContenidoArticulo());

                                                String confirmacion = sc.nextLine();
                                                if (confirmacion.equalsIgnoreCase("si")) {
                                                    articuloDAO.eliminarArticulo(idArticuloEliminar);
                                                } else {
                                                    System.out.println("üü° Eliminaci√≥n cancelada.");
                                                }
                                            } else {
                                                System.out.println("üü• No puedes eliminar un art√≠culo que no es tuyo.");
                                            }
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ning√∫n art√≠culo con el ID proporcionado.");
                                        }
                                        break;
                                    case 5:
                                        System.out.println("\nüìÇ LISTA DE TODOS LOS ART√çCULOS üìÇ");

                                        List<Articulo> listaArticulos = articuloDAO.obtenerTodosLosArticulos();

                                        if (listaArticulos.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay art√≠culos registrados en la base de datos.");
                                        } else {
                                            for (Articulo articulo : listaArticulos) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID: " + articulo.getIdArticulo());
                                                System.out.println("üìÑ T√≠tulo: " + articulo.getTitulo());
                                                System.out.println("‚úç Contenido: " + articulo.getContenidoArticulo());
                                                System.out.println("üìÇ Tipo: " + articulo.getTipoArticulo());
                                                System.out.println("üë§ Autor ID: " + articulo.getIdAutor());
                                                System.out.println("üìÜ Fecha de creaci√≥n: " + articulo.getFechaCreacionArticulo());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 6:
                                        System.out.println("\n‚úèÔ∏è ACTUALIZAR PERFIL ‚úèÔ∏è");

                                        int idUsuarioActualizar = usuario.getIdUsuario();

                                        UsuarioNormal usuarioExistente = (UsuarioNormal) usuarioDAO.obtenerUsuarioPorId(idUsuarioActualizar);

                                        if (usuarioExistente != null) {
                                            System.out.println("\nüìå Perfil actual:");
                                            System.out.println("üë§ Username: " + usuarioExistente.getUsername());
                                            System.out.println("üìß Correo: " + usuarioExistente.getCorreoUsuario());
                                            System.out.println("üìù Biograf√≠a: " + usuarioExistente.getBiografiaUsuario());

                                            System.out.print("* Ingrese el nuevo username: ");
                                            String nuevoUsername = sc.nextLine();

                                            System.out.print("* Ingrese el nuevo correo electr√≥nico: ");
                                            String nuevoCorreo = sc.nextLine();

                                            System.out.print("* Ingrese la nueva contrase√±a: ");
                                            String nuevaContrasena = sc.nextLine();

                                            System.out.print("* Ingrese la nueva biograf√≠a: ");
                                            String nuevaBiografia = sc.nextLine();

                                            UsuarioNormal usuarioActualizado = new UsuarioNormal(
                                                    nuevoUsername, idUsuarioActualizar, usuarioExistente.getFechaRegistro(),
                                                    nuevoCorreo, nuevaContrasena, nuevaBiografia, usuarioExistente.getRolUsuario()
                                            );

                                            usuarioDAO.actualizarUsuario(usuarioActualizado);
                                        } else {
                                            System.out.println("üü• No se encontr√≥ el perfil del usuario.");
                                        }
                                        break;
                                    case 7:
                                        System.out.println("\nüö© GENERAR REPORTE üö©");

                                        System.out.print("* Ingrese el motivo del reporte: ");
                                        String motivoReporte = sc.nextLine();

                                        String estadoReporte;
                                        do {
                                            System.out.print("* Estado del reporte (Pendiente / Revisado / Cerrado): ");
                                            estadoReporte = sc.nextLine();

                                            if (!estadoReporte.equalsIgnoreCase("Pendiente") &&
                                                    !estadoReporte.equalsIgnoreCase("Revisado") &&
                                                    !estadoReporte.equalsIgnoreCase("Cerrado")) {
                                                System.out.println("üü• Estado inv√°lido. Debe ser 'Pendiente', 'Revisado' o 'Cerrado'.");
                                            }
                                        } while (!estadoReporte.equalsIgnoreCase("Pendiente") &&
                                                !estadoReporte.equalsIgnoreCase("Revisado") &&
                                                !estadoReporte.equalsIgnoreCase("Cerrado"));

                                        int idArticuloReportado = obtenerNumeroValido(sc, "* Ingrese el ID del art√≠culo a reportar: ");

                                        Articulo articuloAReportar = articuloDAO.obtenerArticuloPorId(idArticuloReportado);

                                        if (articuloAReportar != null) {
                                            Reporte nuevoReporte = new Reporte(0, motivoReporte, LocalDateTime.now(), estadoReporte, usuario.getIdUsuario(), idArticuloReportado);
                                            reporteDAO.crearReporte(nuevoReporte);
                                        } else {
                                            System.out.println("üü• No se encontr√≥ el art√≠culo con el ID ingresado.");
                                        }
                                        break;
                                    case 8:
                                        System.out.println("\nüìÇ VER CATEGOR√çA DE CONTENIDO üìÇ");

                                        int idCategoriaBuscar = obtenerNumeroValido(sc, "* Ingrese el ID de la categor√≠a que desea ver: ");

                                        Categoria categoriaEncontrada = categoriaDAO.obtenerCategoriaPorId(idCategoriaBuscar);

                                        if (categoriaEncontrada != null) {
                                            System.out.println("\nüìå Categor√≠a encontrada:");
                                            System.out.println("üÜî ID: " + categoriaEncontrada.getIdCategoria());
                                            System.out.println("üìå Nombre: " + categoriaEncontrada.getNombreCategoria());
                                            System.out.println("üìù Descripci√≥n: " + categoriaEncontrada.getDescripcion());
                                        } else {
                                            System.out.println("üü• No se encontr√≥ ninguna categor√≠a con el ID proporcionado.");
                                        }
                                        break;
                                    case 9:
                                        System.out.println("\nüìÇ LISTA DE TODAS LAS CATEGOR√çAS üìÇ");

                                        List<Categoria> listaCategorias = categoriaDAO.obtenerTodasLasCategorias();

                                        if (listaCategorias.isEmpty()) {
                                            System.out.println("‚ö†Ô∏è No hay categor√≠as registradas en la base de datos.");
                                        } else {
                                            for (Categoria categoria : listaCategorias) {
                                                System.out.println("=====================================");
                                                System.out.println("üÜî ID Categor√≠a: " + categoria.getIdCategoria());
                                                System.out.println("üìå Nombre: " + categoria.getNombreCategoria());
                                                System.out.println("üìù Descripci√≥n: " + categoria.getDescripcion());
                                                System.out.println("=====================================");
                                            }
                                        }
                                        break;
                                    case 0:
                                        System.out.println("\nüë§ Cerrando men√∫ de usuario...");
                                        menuUsuario = false;
                                        break;
                                    default:
                                        System.out.println("\nüî¥ Opci√≥n inv√°lida. Intenta nuevamente...");
                                        break;
                                }
                            } while (menuUsuario && opcionUsuario != 0);
                        }
                    } else {
                        do {
                            validacionLogin++;
                            System.out.println("üü• USUARIO O CONTRASE√ëA INCORRECTOS. Intente nuevamente.");

                            System.out.print("* Ingrese su nombre de usuario: ");
                            usernameLogin = sc.nextLine();
                            System.out.print("* Ingrese su contrase√±a: ");
                            contrasenaLogin = sc.nextLine();

                            usuario = usuarioDAO.autenticarUsuario(usernameLogin, contrasenaLogin);

                        } while (usuario == null && validacionLogin < 3);
                    }
                    break;
                case 2:
                    String username, correoUsuario, contrasenaUsuario, biografiaUsuario, rolUsuario;
                    System.out.println("\nüëæ CREAR CUENTA üëæ\n");
                    System.out.print("* Ingrese su nombre de usuario: ");
                    username = sc.nextLine();

                    if (usuarioDAO.usernameExiste(username)) {
                        System.out.println("üü•üë• El nombre de usuario '" + username + "' ya existe. Intenta con otro.");
                        break;
                    }

                    System.out.print("* Ingrese correo electr√≥nico: ");
                    correoUsuario = sc.nextLine();
                    System.out.print("* Ingrese su contrase√±a (m√≠nimo 8 caracteres): ");
                    contrasenaUsuario = sc.nextLine();

                    if (contrasenaUsuario.length() < 8) {
                        System.out.println("üü•üîí La contrase√±a debe tener al menos 8 caracteres.");
                        break;
                    }

                    System.out.print("* Ingrese una breve biograf√≠a o descripci√≥n de usted mismo: ");
                    biografiaUsuario = sc.nextLine();
                    System.out.print("* ¬øEn qu√© rol deseas registrarte? Usuario/Administrador: ");
                    rolUsuario = sc.nextLine();

                    Usuario nuevoUsuario;

                    if (rolUsuario.equalsIgnoreCase("administrador")) {
                        nuevoUsuario = new Administrador(username, 0, LocalDateTime.now(), correoUsuario, contrasenaUsuario, biografiaUsuario, rolUsuario);
                    } else if (rolUsuario.equalsIgnoreCase("usuario")) {
                        nuevoUsuario = new UsuarioNormal(username, 0, LocalDateTime.now(), correoUsuario, contrasenaUsuario, biografiaUsuario, rolUsuario);
                    } else {
                        System.out.println("üü•üë§ El Rol que ingresaste es inv√°lido.");
                        break;
                    }

                    usuarioDAO.crearUsuario(nuevoUsuario);
                    System.out.println("üü©üë§ Cuenta creada exitosamente. Ahora inicia sesi√≥n.\n");
                    break;
                case 0:
                    System.out.println("\n**** üëæ GRACIAS POR VISITAR C√ìDIGO ZERO üëæ ****\n");
                    menu1 = false;
                    break;
                default:
                    System.out.println("\nüî¥ UPS! Parece que seleccionaste una opci√≥n inexistente. \nIntenta nuevamente...");
                    break;
            }
        }
    }
}